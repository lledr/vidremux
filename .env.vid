export LANG=en_US.UTF-8

DIRVID="/var/video"
CFGRX="$HOME/config/vidremux.cfg"
CFGRXK="$HOME/config/vidremux.kids.cfg"

EXE=exe
AUD=aac

MKVMRG="$EXE nice -5 /usr/bin/mkvmerge -q"
MKVXTR="$EXE nice -5 /usr/bin/mkvextract -q"
FFMPG="$EXE nice -5 $HOME/bin/ffmpeg -y -v error -nostdin -analyzeduration 100M -probesize 100M"
FFPRB="$EXE $HOME/bin/ffprobe -v error -analyzeduration 100M -probesize 100M"

MV="$EXE /bin/mv"
RM="$EXE /bin/rm -f"
SLEEP="$EXE /bin/sleep"
EXEC="$EXE exec"
TOUCH="$EXE /usr/bin/touch"
TRUNC="$EXE /usr/bin/truncate"
PIDOF="$EXE /bin/pidof"
SED="$EXE /bin/sed"
SZ="$EXE /usr/bin/wc -c"
FILE="$EXE /usr/bin/file -bi"

VQUEUE="$EXE /home/lucas/bin/vidqueue"
VPROC="$EXE /home/lucas/bin/vidprocess"

FFMPG_SRD="-ac 2 -clev 1dB -slev 0dB"

declare -A FFMPG_ENC=(
[aac]="-af volume=10dB -c:a libfdk_aac -vbr 4"
[flc]="-c:a flac"
)

declare -A FFMPG_EXT=(
[aac]=aac
[flc]=flac
)

FQUEUE=$DIRVID/.queue
LVID=$DIRVID/vid.log
TMPSRT=/tmp/.tmp.srt

FSZ=4096
TIMEPL=15

declare -A SBTYPE_FSZ=(
[subrip]=6000
[ass]=12000
[hdmv_pgs_subtitle]=100000
)

option() {
	opt="  -$1"
	echo -e $2 | fold -s -w 65 | while read; do printf "%-15s%s\n" "$opt" "$REPLY"; unset opt; done
}

usageh() {
	printf "Usage: %s\n" "$(basename $0) [options] $1"
	echo $2 | fold -s
	printf "\nOptions:\n"

	option "h" "Display this help and exit."
}

usage() {
	echo $USAGE
	exit 1
}

error() {
	echo "Error: $1." >& 2
	exit 1
}

casel() {
	case $1 in
	h)
		usage
		;;
	\?)
		error "invalid option -$OPTARG"
		;;
	:)
		error "option -$OPTARG requires an argument"
		;;
	esac
}

flg() {
	echo ":h$1"
}

log() {
	echo $(date "+%F %T") ${2:-INF} [$$] "$1" >> $LVID
}

logerr() {
	log "$*" ERR && exit 1
}

exe() {
	log "$*" DBG
	"$@"
}

srcstreams() {
	eval $($FFPRB -show_streams -of flat=s=_ "$1" | sed 's/^streams_stream_\([0-9]*\)_\([^=]*\)=\(.*\)$/\Lstream_\2[\1]=\3/')
}

valmatch() {
	local i val=$1
	shift

	[[ ! $val ]] && return 1

	for i; do
		if [[ \
				! ${val/$i/}                           || \
				! ${val/$i[![:alnum:]]*/}              || \
				! ${val/*[![:alnum:]]$i[![:alnum:]]*/} || \
				! ${val/*[![:alnum:]]$i/} ]]; then
			return 0
		fi
	done

	return 1
}

valmatchstt() {
	local i val=$1
	shift

	for i; do
		[[ "$val" == "$i" ]] && return 0
	done

	return 1
}

chkforced() {
	[[ ! ${SBTYPE_FSZ[$3]} ]] && log "No force size limit registered for subtitle type $3." WRN && return 1
	
	log "Checking size for subtitle stream $2 ($3 - forced low threshold is ${SBTYPE_FSZ[$3]})."

	sz=$($MKVXTR tracks "$1" $2:>($SZ))
	log "Size is $sz."
	
	[[ $sz -lt ${SBTYPE_FSZ[$3]} ]] && log "Under threshold, impose forced flag." && return 0
	return 1
}

getenc() {
	log "Retrieving encoding for subtitle stream $2."

	$MKVXTR tracks "$1" $2:"$TMPSRT"
	$FILE "$TMPSRT" | $SED 's/.* charset=//'
}
