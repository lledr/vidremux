#!/bin/bash

. $(dirname $0)/.env.vid
shopt -s extglob

matchmsk() {
	[[ ${1:0:1} == '?' ]] && mdt=0 || mdt=1

	for tid in ${!lmd[@]}; do
		# Optional mask. May match on multiple tracks.
		if [[ $mdt == 0 && ! ${lmd[$tid]##${1:1}} ]]; then
			unset lmd[$tid]
		fi

		# Mandatory mask. Must match on one unique track.
		if [[ $mdt == 1 && ! ${lmd[$tid]##${1%%'#'*}} ]]; then
			# Record track ID.
			if [[ ! ${1%%*'#'*t*} ]]; then
				prm[${1:0:1}]=$tid
			fi

			# Record language.
			if [[ ! ${1%%*'#'*l*} && ${stream_tags_language[$tid]} != und ]]; then
				prm[l]=${stream_tags_language[$tid]}
			fi

			# Matched. Disable track of further check.
			unset lmd[$tid]

			return 0
		fi
	done

	return $mdt
}

match() {
	local lmd msk i

	for i in ${!gmd[@]}; do lmd[$i]=${gmd[$i]}; done
	for msk in $1; do if ! matchmsk $msk; then return 1; fi; done

	# Not all tracks matched. Try again.
	[[ ${!lmd[@]} ]] && return 2

	return 0
}

usage() {
        usageh "file" "Handle video file and register tracks to be processed."
        option "d" "Dry run. Just display (in log file) what would happen."
        exit 1
}

while getopts $(flg) opt; do
        casel $opt
done

shift $((OPTIND - 1))
[[ ! $1 ]] && error "no file specified"

exec &>> $LVID
exec 3< /tmp

# Silently ignore hidden files.
[[ ${1:0:1} == '.' ]] && exit 0

# Silently ignore unhandled files.
[[ ${1%%*@(.mkv|.avi|.mp4)} ]] && exit 0

# Exclusive lock on /tmp dir.
flock 3

log "Handling file: $1"

dir=all
for f in $DIRVID/.vid.nop*; do
	if [[ -f $f ]]; then
		log "No-op handler. Do nothing."
		
		num=${f##*'.'}
		[[ $num -gt 0 ]] && $RM $f
		[[ $num -gt 1 ]] && $TOUCH $DIRVID/.vid.nop.$((num - 1))

		exit 0
	fi
done
for f in $DIRVID/.vid.kids.*; do 
	if [[ -f $f && -z ${1##*${f##*'.'}*} ]]; then
		log "Kids handler. Update settings."
		
		CFGRX="$CFGRXK"
		dir=kids

		$RM $f
	fi
done
for f in $DIRVID/.vid.mov*; do
	if [[ -f $f ]]; then
		log "Mov handler. Just move, no wait."
		
		$MV "$DIRVID/$1" "$DIRVID/$dir/$1"
		[[ $? -ne 0 ]] && logerr "Unable to move file to $dir. Abort."

		log "File moved."

		num=${f##*'.'}
		[[ $num -gt 0 ]] && $RM $f
		[[ $num -gt 1 ]] && $TOUCH $DIRVID/.vid.mov.$((num - 1))

		exit 0
	fi
done

srcstreams "$DIRVID/$1"

# Sanitize.
for i in $(seq 0 $(($($FFPRB -show_entries format=nb_streams -of default=noprint_wrappers=1:nokey=1 "$DIRVID/$1") - 1))); do
	# Exclude explicit attachments.
	valmatchstt "${stream_codec_type[$i]}" attachment data && continue

	# Exclude attached pics, seen as video streams.
	[[ ${stream_disposition_attached_pic[$i]} == 1 ]] && continue

	# Exclude some identified useless subs (e.g. SDH - Subtitles for the Deaf and Hard of hearing).
	[[ ${stream_codec_type[$i]} == subtitle ]] && valmatch "${stream_tags_title[$i]}" sdh song songs commentary chanson chansons commentaires sourds malentendants && continue

	# Exclude unhandled bitmap subs.
	#valmatch "${stream_codec_name[$i]}" pgssub dvdsub hdmv_pgs_subtitle dvd_subtitle && continue

	# Restore forced subtitles.
	[[ ${stream_codec_type[$i]} == subtitle ]] && valmatch "${stream_tags_title[$i]}" force forced forcé forcés forces && stream_disposition_forced[$i]=1

	# Language specified in title.
	valmatch "${stream_tags_title[$i]}" anglais english eng en          && stream_tags_language[$i]=eng
	valmatch "${stream_tags_title[$i]}" français francais french fre fr && stream_tags_language[$i]=fre

	# Regroup esoteric language non-values.
	valmatchstt "x${stream_tags_language[$i]}" "x" "xunknown" && stream_tags_language[$i]=und

	# Additional check on text subtitles file size to set forced flag. Slow down process.
	[[ ${stream_codec_type[$i]} == subtitle ]] && chkforced "$DIRVID/$1" $i "${stream_codec_name[$i]}" && stream_disposition_forced[$i]=1

	gmd[$i]=${stream_codec_type[$i]:0:1}:${stream_tags_language[$i]}:${stream_disposition_default[$i]}:${stream_disposition_forced[$i]}
done

log "Media signature: $(for i in ${!gmd[@]}; do echo -n "$i=${gmd[$i]} "; done)"

while IFS='%' read -r cfg ldf; do
	[[ ! $cfg || ${cfg:0:1} == '#' ]] && continue

	declare -A prm=([l]=$ldf)
	if match "$cfg"; then
		log "Successful match with $cfg"
		log "Match gives: $(for i in ${!prm[@]}; do echo -n "$i=${prm[$i]} "; done)"
		
		$VQUEUE$(for i in ${!prm[@]}; do echo -n " -$i" ${prm[$i]}; done) -d $dir "$1"
		exit
	fi
done < $CFGRX

logerr "Fail to match. Abort."
