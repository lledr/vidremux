export LANG=en_US.UTF-8

DIRVID="/var/video"
CFGRX="$HOME/bin/.remux.cfg"

EXE=exe
AUD=aac

MKVMRG="$EXE nice -5 /usr/bin/mkvmerge -q"
FFMPG="$EXE nice -5 $HOME/bin/ffmpeg -y -v error -nostdin"
FFPRB="$HOME/bin/ffprobe -v error"
MV="$EXE /bin/mv"
RM="$EXE /bin/rm -f"
SLEEP="$EXE /bin/sleep"
EXEC="$EXE exec"
TOUCH="$EXE /usr/bin/touch"
TRUNC="$EXE /usr/bin/truncate"
PIDOF="$EXE /bin/pidof"
SED="$EXE /bin/sed"

VQUEUE="$EXE /home/lucas/bin/vidqueue"

#FFMPG_SRD="-filter:a volume=2 -ac 2 -clev 0dB -slev -3dB"
#FFMPG_SRD="-filter:a volume=3 -ac 2 -clev 3dB -slev -3dB"
#FFMPG_SRD="-ac 2"
FFMPG_SRD="-ac 2 -clev 3dB -slev 0dB"

#[aac]="-af volume=5dB,compand=.3|.3:1|1:-90/-60|-60/-40|-40/-30|-20/-20:6:0:-90:0.2 -c:a libfdk_aac -vbr 4"
#[aac]="-af volume=5dB,compand=.3|.3:1|1:-70/-70|-60/-20:6:0:-90:0.2 -c:a libfdk_aac -vbr 4"

declare -A FFMPG_ENC=(
[aac]="-af volume=10dB -c:a libfdk_aac -vbr 4"
[flc]="-c:a flac"
)

declare -A FFMPG_EXT=(
[aac]=aac
[flc]=flac
)

FQUEUE=$DIRVID/.queue
LVID=$DIRVID/.vid.log

option() {
	opt="  -$1"
	echo -e $2 | fold -s -w 65 | while read; do printf "%-15s%s\n" "$opt" "$REPLY"; unset opt; done

}

usageh() {
	printf "Usage: %s\n" "$(basename $0) [options] $1"
	echo $2 | fold -s
	printf "\nOptions:\n"

	option "h" "Display this help and exit."
}

usage() {
	echo $USAGE
	exit 1
}

error() {
	echo "Error: $1." >& 2
	exit 1
}

casel() {
	case $1 in
	h)
		usage
		;;
	\?)
		error "invalid option -$OPTARG"
		;;
	:)
		error "option -$OPTARG requires an argument"
		;;
	esac
}

flg() {
	echo ":h$1"
}

log() {
	date "+%F %T ${2:-INF} - $1" >> $LVID
}

exe() {
	log "$*"
	[[ -n $dry ]] && return 0

	"$@"
}

srcstreams() {
	eval $($FFPRB -show_streams -of flat=s=_ "$1" | sed 's/^streams_stream_\([0-9]*\)_\([^=]*\)=\(.*\)$/\Lstream_\2[\1]=\3/')
}

valmatch() {
	local i val=$1
	shift

	[[ -z $val ]] && return 1

	for i; do
		if [[ \
				-z ${val/$i/}                           || \
				-z ${val/$i[![:alnum:]]*/}              || \
				-z ${val/*[![:alnum:]]$i[![:alnum:]]*/} || \
				-z ${val/*[![:alnum:]]$i/} ]]; then
			return 0
		fi
	done

	return 1
}

valmatchst() {
	local i val=$1
	shift

	[[ -z $val ]] && return 1

	for i; do
		[[ -z ${val/$i/} ]] && return 0
	done

	return 1
}
